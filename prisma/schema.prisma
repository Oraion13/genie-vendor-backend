// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x"]
  // so, I am runnig node as a docker container, it is a debian.
  // If I put binaryTargets = ["native"], it will throw an error.
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Vendor
model Vendor {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String
  name         String?
  address      String?
  followers    User[]    @relation(fields: [followersIDs], references: [id])
  followersIDs String[]  @db.ObjectId
  products     Product[]
}

// User
model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String
  name         String?
  isAdmin      Boolean   @default(false)
  following    Vendor[]  @relation(fields: [followingIDs], references: [id])
  followingIDs String[]  @db.ObjectId
  comments     Comment[]
}

// Comment by Users for Products
model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productID], references: [id])
  productID String  @db.ObjectId
  user      User    @relation(fields: [userID], references: [id])
  userID    String  @db.ObjectId
}

// Product
model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    String?
  price       Int
  description String
  comments    Comment[]
  images      Image[]
  vendor      Vendor     @relation(fields: [vendorID], references: [id])
  vendorID    String     @db.ObjectId
  discount    Discount[]
  stock       Int
  createdAt   DateTime   @default(now())
}

// Image
model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  product   Product @relation(fields: [productID], references: [id])
  productID String  @db.ObjectId
}

// Discount
model Discount {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productID], references: [id])
  productID String  @unique @db.ObjectId
  discount  Int

  @@index([id, productID])
}
